{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COMP2825 - Computer Architecture and Organization Overview For full course information COMP 2825 - BCIT Course taken in Fall 2025 term ( outline ) with Rahim Oraji . Midterm and Final in-person weekly quizes weekly labs each lab will involve two things: watching a video and writing a one page summary (what is this, high school?) answering questions based on the slides only given 5 days for the labs because reasons","title":"Home"},{"location":"#comp2825-computer-architecture-and-organization","text":"","title":"COMP2825 - Computer Architecture and Organization"},{"location":"#overview","text":"For full course information COMP 2825 - BCIT Course taken in Fall 2025 term ( outline ) with Rahim Oraji . Midterm and Final in-person weekly quizes weekly labs each lab will involve two things: watching a video and writing a one page summary (what is this, high school?) answering questions based on the slides only given 5 days for the labs because reasons","title":"Overview"},{"location":"wk_one/","text":"Week 1 Computer Architecture Computer Architecture : The study of how to design the parts of a computer system visible to programmers, including the instruction set, memory hierarchy, and execution model (e.g., pipelined execution). Computer organization : Focuses on the internal structure of hardware components like ALUs, registers, and buses. In practice, both used interchangably. Studying computer architecture helps us understand: code implementation, performance optimization, concepts such as parallelism, caching, and pipelining, tradeoffs between hardware and software design choices Computers and Programs A computer executes given instructions (programs) to produce results for the user. A program is a set of instructions written in a high level programming language. In general, when it comes to executing a given program, there are two methods: Translation (compilation) Converts a high-level program into a low-level (machine code) version before execution Interpretation A low-level machine program (the interpreter) reads and executes high-level programs instruction by instruction during runtime. Program Languages and Levels Machine Language (low level) Raw binary code (zeros and ones) executed directly by the CPU. Human-Readable Machine Language Uses mnemonics instead of binary, but still closely tied to hardware. Each instruction maps directly to machine code. Example: Assembly (1949) \"Modern\" Programming Languages (high level) Abstract, human-readable languages designed to be portable and easier to write. Compiled or interpreted into lower-level code. Examples: C (1970), Java (1995), Python (1991), JavaScript (1995)","title":"Week 1 - Overview of Computer Architecture"},{"location":"wk_one/#week-1","text":"","title":"Week 1"},{"location":"wk_one/#computer-architecture","text":"Computer Architecture : The study of how to design the parts of a computer system visible to programmers, including the instruction set, memory hierarchy, and execution model (e.g., pipelined execution). Computer organization : Focuses on the internal structure of hardware components like ALUs, registers, and buses. In practice, both used interchangably. Studying computer architecture helps us understand: code implementation, performance optimization, concepts such as parallelism, caching, and pipelining, tradeoffs between hardware and software design choices","title":"Computer Architecture"},{"location":"wk_one/#computers-and-programs","text":"A computer executes given instructions (programs) to produce results for the user. A program is a set of instructions written in a high level programming language. In general, when it comes to executing a given program, there are two methods: Translation (compilation) Converts a high-level program into a low-level (machine code) version before execution Interpretation A low-level machine program (the interpreter) reads and executes high-level programs instruction by instruction during runtime.","title":"Computers and Programs"},{"location":"wk_one/#program-languages-and-levels","text":"Machine Language (low level) Raw binary code (zeros and ones) executed directly by the CPU. Human-Readable Machine Language Uses mnemonics instead of binary, but still closely tied to hardware. Each instruction maps directly to machine code. Example: Assembly (1949) \"Modern\" Programming Languages (high level) Abstract, human-readable languages designed to be portable and easier to write. Compiled or interpreted into lower-level code. Examples: C (1970), Java (1995), Python (1991), JavaScript (1995)","title":"Program Languages and Levels"}]}